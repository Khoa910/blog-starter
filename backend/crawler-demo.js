// Demo s·ª≠ d·ª•ng Viblo Crawler
// File n√†y minh h·ªça c√°ch s·ª≠ d·ª•ng crawler t·ª´ backend ch√≠nh

import { crawlVibloPosts, runCrawler, CRAWLER_CONFIG } from './index.js';

console.log('üöÄ Viblo Crawler Demo');
console.log('=====================');

// Hi·ªÉn th·ªã c·∫•u h√¨nh
console.log('\nüìã C·∫•u h√¨nh hi·ªán t·∫°i:');
console.log(`- URL: ${CRAWLER_CONFIG.VIBLO_URL}`);
console.log(`- S·ªë b√†i vi·∫øt: ${CRAWLER_CONFIG.POSTS_LIMIT}`);
console.log(`- Delay: ${CRAWLER_CONFIG.DELAY_BETWEEN_REQUESTS}ms`);
console.log(`- Timezone: ${CRAWLER_CONFIG.TIMEZONE}`);

// Demo ch·∫°y crawler m·ªôt l·∫ßn
async function demoCrawler() {
    console.log('\nüîÑ Demo ch·∫°y crawler m·ªôt l·∫ßn...');
    try {
        await crawlVibloPosts();
        console.log('‚úÖ Crawler demo ho√†n th√†nh!');
    } catch (error) {
        console.error('‚ùå L·ªói khi ch·∫°y crawler demo:', error.message);
    }
}

// Demo ch·∫°y scheduler
function demoScheduler() {
    console.log('\n‚è∞ Demo ch·∫°y scheduler...');
    console.log('Scheduler s·∫Ω ch·∫°y crawler m·ªói 5 ti·∫øng');
    console.log('Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng');
    
    try {
        runCrawler();
    } catch (error) {
        console.error('‚ùå L·ªói khi ch·∫°y scheduler demo:', error.message);
    }
}

// Menu demo
console.log('\nüìñ Ch·ªçn demo:');
console.log('1. Ch·∫°y crawler m·ªôt l·∫ßn');
console.log('2. Ch·∫°y scheduler');
console.log('3. Tho√°t');

// ƒê·ªçc input t·ª´ user (ƒë∆°n gi·∫£n)
process.stdin.on('data', (data) => {
    const choice = data.toString().trim();
    
    switch (choice) {
        case '1':
            demoCrawler();
            break;
        case '2':
            demoScheduler();
            break;
        case '3':
            console.log('üëã T·∫°m bi·ªát!');
            process.exit(0);
            break;
        default:
            console.log('‚ùì L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn 1, 2 ho·∫∑c 3.');
    }
});

console.log('\nNh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1, 2, ho·∫∑c 3):');
